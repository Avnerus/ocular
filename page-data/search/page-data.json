{"componentChunkName":"component---node-modules-ocular-gatsby-src-templates-search-jsx","path":"/search","webpackCompilationHash":"11593817ca3cf2f744f9","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"data":[{"excerpt":"Welcome Why Ocular? We needed a system to build documentation websites with the least amount of friction. Our first use case has been the…","rawMarkdownBody":"# Welcome\n\n\n## Why Ocular?\n\nWe needed a system to build documentation websites with the least amount of friction. Our first use case has been the websites for the various visualization projects of Uber such as [Luma.gl](https://luma.gl) or [Loaders.gl](https://loaders.gl). \n\nWe wanted: \n- to organize documentation files with a table of contents, navigation and search;\n- to have interactive examples;\n- to have some control on formatting;\n- to generate websites discoverable by search engines;\n- to make it easy to publish these websites, especially on github pages;\n- to make this experience possible without writing a line of code;\n- to provide sensible defaults in terms of navigation and styling;\n- but to allow advanced users to overwrite and customize anything they want. \n\nHappy documenting!\n\nTo find out more, go to [get started](get-started.md).\n\n## ocular-dev-tools\n\nocular-dev-tools installs a set of configurable development scripts to handle build, test and publish tasks for JavaScript framework repositories.\n\nWhile highly configurable ocular-dev-tools is very opinionated in choice of tooling etc, and mainly targets vis.gl frameworks, like deck.gl, luma.gl etc.\n","slug":"docs","title":"Welcome"},{"excerpt":"FAQ How to debug ocular builds Set  in ocular-config.js, numbers between - give increasing levels of logging. ocular-gatsby technical issues…","rawMarkdownBody":"# FAQ\n\n## How to debug ocular builds\n\n* Set `logLevel` in ocular-config.js, numbers between `1`-`4` give increasing levels of logging.\n\n## ocular-gatsby technical issues\n\n### site-query.jsx\n\nThe `src/components/site-query.jsx` file needs to be identical to the corresponding file in ocular-gatsby, to trigger graphql compilation. Do not modify this file.\n\n### registerReactComponent\n\nThis was an older page customization mechanims. It is no longer supported. Remove, and use the `EXAMPLE.componentUrl` system instead.\n","slug":"docs/faq","title":"FAQ"},{"excerpt":"Quick start Installing Ocular From the project you want to create a website for, create a new folder: Initialize that folder as a new…","rawMarkdownBody":"# Quick start\n## Installing Ocular\nFrom the project you want to create a website for, create a new folder:\n\n```\nmkdir website\n```\n\nInitialize that folder as a new project with its own package.json.\n\nFrom now on, we'll call that folder you've just created the Ocular folder.\n\n```\nnpm init -y\n```\n\nthen install Ocular as a devDependency.\n\n```\nyarn add -D ocular-gatsby\n```\nor\n```\nnpm install ocular-gatsby --save-dev\n```\n\n## Creating and running your Ocular website\n\nNow, start the Ocular project:\n\n```\nocular init\n```\n\nThis will prompt you with a few questions, and create a number of files and folders in the Ocular folder.\nThe most important of these file is `ocular-config.js` in the Ocular folder, which contains all the settings for your website. You can edit it later. \n\nNow install any remaining packages:\n```\nyarn\n```\nor\n```\nnpm install\n```\n\nYour project will need a `table-of-contents.json` file in the same location you have your documentation files. You can create one manually but Ocular can also create one for you by typing: \n```\nyarn build-toc\n```\nor\n```\nnpm run build-toc\n```\n\nAt this stage, you can see your website by typing:\n\n```\nyarn start\n```\nor\n```\nnpm run start\n```\n\n## Writing content\n\nYou're going to need documentation files for your documentation website.\nYour `ocular-config.js` file will contain the location of these files. Read [Writing documentation](./creating-content/writing-documentation) to know all about that part.\nAnd your documentation files will be available on your website!\n\n## Publishing your website\n\nThat's all you need if you just want to have your website running on your machine. But if you want to have your site running somewhere else, such as GitHub, that's not enough.\n\nFrom the ocular folder, type\n\n```\nyarn build\n```\nor\n```\nnpm run build\n```\nAnd this will generate a static website in the folder `public` (a sub-folder of your Ocular folder) \nYou can go to that folder and test your built website by typing\n```\nyarn serve\n```\nor\n```\nnpm run serve\n```\n\nYou can now safely upload the contents of this folder on a web server. If you want to deploy this website to Github Pages, and your project is already hosted on github, you can instead type:\n\n```\nyarn deploy\n```\nor\n```\nnpm run deploy\n```\n","slug":"docs/get-started","title":"Quick start"},{"excerpt":"Command Line Tools Typical Build Script Ocular Script Description   Install dependencies for monorepos   Remove all transpiled files in…","rawMarkdownBody":"# Command Line Tools\n\n| Typical Build Script | Ocular Script | Description |\n| --- | --- | --- |\n| [`ocular-bootstrap`](docs/dev-tools/cli/ocular-bootstrap) | `bootstrap` | Install dependencies for monorepos |\n| [`ocular-clean`](docs/dev-tools/cli/ocular-clean) | `clean` | Remove all transpiled files in preparation for a new build. |\n| [`ocular-build`](docs/dev-tools/cli/ocular-build) | `build` | Transpile all modules. |\n| [`ocular-lint`](docs/dev-tools/cli/ocular-lint) | `lint` | Run eslint & prettier on the code base. |\n| [`ocular-test`](docs/dev-tools/cli/ocular-test) | `test` | Run tests. |\n| [`ocular-metrics`](docs/dev-tools/cli/ocular-metrics) | `metrics` | Bundle the source and report the bundle size. |\n| [`ocular-publish`](docs/dev-tools/cli/ocular-publish) | `publish` | Publish the packages, create git tag and push. |\n","slug":"docs/dev-tools/command-line-interface","title":"Command Line Tools"},{"excerpt":"ocular-dev-tools Dev tools for vis.gl open source Javascript frameworks Contains developer targets for building, cleaning, linting, testing…","rawMarkdownBody":"# ocular-dev-tools\n\nDev tools for vis.gl open source Javascript frameworks\n\nContains developer targets for building, cleaning, linting, testing and publishing frameworks.\n\n* The testing script has a number of modes, it can run tests on both browser and node, it can run test on src or built distributions etc.\n* The linting feature supports both code and markdown, and runs both eslint and prettier.\n* Supports both single module repos (all code in src) and monorepos (code in `modules/<module-name>/src`).\n\nNote: flow is not currently integrated into ocular-dev-tools as we restrict its use to React related code bases.\n\n\n## Installation\n\n```bash\nyarn add ocular-dev-tools reify -D\n# optionally enable browser tests\nyarn add @probe.gl/test-utils -D\n```\n\nYour `package.json` should looks something like:\n\n```json\n  \"devDependencies\": {\n    \"ocular-dev-tools\": \"*\",\n    \"reify\": \"^0.18.1\",\n    \"@probe.gl/test-utils\": \"^3.0.0\"\n  }\n```\n\nAfter installing you can set up your build scripts in package.json as follows:\n\n```json\n  \"scripts\": {\n    \"bootstrap\": \"PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true yarn && ocular-bootstrap\",\n    \"build\": \"ocular-clean && ocular-build\",\n    \"lint\": \"ocular-lint\",\n    \"metrics\": \"ocular-metrics\",\n    \"publish\": \"ocular-publish\",\n    \"test\": \"ocular-test\"\n  },\n```\n\n## Usage\n\n### Configuration\n\nTo provide maximum control to the user, ocular build scripts use config files in the framework repo. In cases where such files allow for importing other templates, ocular provides exports that can be used, if not it provides a template that the user can copy into the frameworks root directory.\n\n#### babel\n\nIf `.babelrc` or `babel.config.js` is found at the root of the package, it is used to transpile all source code. Otherwise, a default babel config is used.\n\nYou may extend the default babel config as follows:\n\n```js\n// babel.config.js\nconst getBabelConfig = require('ocular-dev-tools/config/babel.config');\n\nmodule.exports = api => {\n  const config = getBabelConfig(api);\n  // add custom settings\n  return config;\n};\n```\n\n#### webpack\n\nIf `webpack.config.js` is found at the root of the package, it is used to bundle browser tests and metrics collection. Otherwise, a default webpack config is used.\n\nYou may extend the default webpack config as follows:\n\n```js\nconst getWebpackConfig = require('ocular-dev-tools/config/webpack.config');\nmodule.exports = env => {\n  const config = getWebpackConfig(env);\n  // add custom settings\n  return config;\n};\n```\n\n#### ocular-dev-tools.js\n\nA file `ocular-dev-tools.config.js` can be placed at the root of the package to customize the dev scripts. The config file may export a JSON object that contains the following keys, or a callback function that returns such object:\n\n- `lint`\n  + `paths` (Arrray) - directories to include when linting. Default `['modules', 'src']`\n  + `extensions` (Array) - file extensions to include when linting. Default `['js', 'md']`\n- `aliases` (Object) - additional [module aliases](https://www.npmjs.com/package/module-alias) to use in tests. Default {}.\n- `entry` (Object) - entry points for tests.\n  + `test` (String) - unit test entry point. Default `./test/index`.\n  + `test-browser` (String|[Object](https://webpack.js.org/concepts/entry-points/)) - unit test browser entry point. Default `./test/browser`.\n  + `bench` (String) - benchmark entry point. Default `./test/bench/index`.\n  + `bench-browser` (String|[Object](https://webpack.js.org/concepts/entry-points/)) - benchmark browser entry point. Default `./test/bench/browser`.\n  + `size` (String|[Object](https://webpack.js.org/concepts/entry-points/)) - metrics entry points. Default `./test/size`.\n- `browserTest` (Object) - options for browser tests. Passed to [BrowserTestDriver.run](https://uber-web.github.io/probe.gl/#/documentation/api-reference-testing/browsertestdriver).\n","slug":"docs/dev-tools","title":"ocular-dev-tools"},{"excerpt":"Aliases ocular-dev-tools automatically generates aliases for your repository. TBA","rawMarkdownBody":"# Aliases\n\nocular-dev-tools automatically generates aliases for your repository.\n\nTBA","slug":"docs/dev-tools/aliases","title":"Aliases"},{"excerpt":"Configuring Tests ocular-dev-tools automatically adds capability run tests in Node.js and live browser and headless-browser. There are some…","rawMarkdownBody":"# Configuring Tests\n\nocular-dev-tools automatically adds capability run tests in Node.js and live browser and headless-browser.\n\nThere are some things that may need to be configured:\n\n## Running ES6+ code in tests\n\n### Using import/export\n\nThe first thing you usually need to address is to sing import/export in Node.js requires taking extra steps\n\nWhile Node 12 will soon enable `import`/`export` by default, you will typically want to at least add support for `import`/`export` under Node.js\n\nTwo tested options are:\n\n* `require('reify')` - This makes Node.js understand `import`/`export`, but otherwise does not transpile your code. This is a great option if you want to test your source code directly, either because you want to debug untranspiled code, or you want to ensure that your code runs untranspiled to ensure you don't use unsupported syntax. You can simply require `reify` at the entry point of your test. Note that you cannot use import in the same file, only inside files required after requiring reify.\n\n```\n// test/index.js\nrequire('reify');\n\n// start to require your tests\nrequire('./test1.js');\n\n```\n\n* `require('@babel/register')` - This option runs the babel transpiler. This is ideal if you want to use non-standard syntax such as stage-x babel plugins, flow etc.\n\nYou can import `@bable/register`, and that is how babel config is accessed in dev mode. Unless that module is imported, no transpilation is done on your source.\n\nYou may also manually set the `BABEL_ENV` environment variable when running your test command to control which config to use.\n\n```sh\nBABEL_ENV=es6 yarn test\n```\n","slug":"docs/dev-tools/configuring-tests","title":"Configuring Tests"},{"excerpt":"Webpack Config ocular-dev-tools will generate a default webpack config. TBA","rawMarkdownBody":"# Webpack Config\n\nocular-dev-tools will generate a default webpack config.\n\nTBA","slug":"docs/dev-tools/webpack-config","title":"Webpack Config"},{"excerpt":"ocular-bootstrap Installing dependencies for a monorepo. Remarks Uses yarn workspaces and lerna to initialize monorepos.","rawMarkdownBody":"# ocular-bootstrap\n\nInstalling dependencies for a monorepo.\n\n\n## Remarks\n\nUses yarn workspaces and lerna to initialize monorepos.\n","slug":"docs/dev-tools/cli/ocular-bootstrap","title":"ocular-bootstrap"},{"excerpt":"What's New ocular-gatsby ocular-gatsby is still in alpha pre-release. Once the gatsby port of ocular is stable, will be published as  and…","rawMarkdownBody":"# What's New\n\n## ocular-gatsby\n\nocular-gatsby is still in alpha pre-release. Once the gatsby port of ocular is stable, will be published as `ocular@1.0.0` and this module will be deprecated.\n\nSome release details are available in the [CHANGELOG](https://github.com/uber-web/ocular/blob/master/modules/gatsby/CHANGELOG.md)\n\n\n## ocular-dev-tools\n\nocular-dev-tools is still in experimental pre-release.\n\nSome release details are available in the [CHANGELOG](https://github.com/uber-web/ocular/blob/master/modules/dev-tools/CHANGELOG.md)\n\n- `ocular-test node-debug` - New mode - starts node debugger\n\n## ocular (classic)\n\nocular classic is deprecated and no longer maintained, and will removed from this repo when `ocular-gatsby` v1.0 release ships.\n","slug":"docs/whats-new","title":"What's New"},{"excerpt":"ocular-build Build the src","rawMarkdownBody":"# ocular-build\n\nBuild the src\n","slug":"docs/dev-tools/cli/ocular-build","title":"ocular-build"},{"excerpt":"ocular-clean Remove all transpiled files in preparation for a new build.","rawMarkdownBody":"# ocular-clean\n\nRemove all transpiled files in preparation for a new build.\n","slug":"docs/dev-tools/cli/ocular-clean","title":"ocular-clean"},{"excerpt":"ocular-lint Run eslint & prettier on the code base. Modes  (default) - run on all files.  - only run on changed files since the last commit…","rawMarkdownBody":"# ocular-lint\n\nRun eslint & prettier on the code base.\n\n```bash\nocular-lint [mode]\n```\n\n## Modes\n\n- `full` (default) - run on all files.\n- `pre-commit` - only run on changed files since the last commit.\n- `fix` - run prettier and eslint --fix on all files.\n\n## Configuration\n\n[Configurations](#ocular-dev-tools-1): `lint`\n","slug":"docs/dev-tools/cli/ocular-lint","title":"ocular-lint"},{"excerpt":"ocular-metrics Bundle the source and report the bundle size. Configuration Configurations:","rawMarkdownBody":"# ocular-metrics\n\nBundle the source and report the bundle size.\n\n## Configuration\n\n[Configurations](#ocular-dev-tools-1): `entry`\n","slug":"docs/dev-tools/cli/ocular-metrics","title":"ocular-metrics"},{"excerpt":"ocular-publish Publish the packages, create git tag and push. Usage This script will usually be mapped to : To run it directly Modes  - bump…","rawMarkdownBody":"# ocular-publish\n\nPublish the packages, create git tag and push.\n\n## Usage\n\nThis script will usually be mapped to `publish`:\n```bash\nyarn publish [mode]\n```\n\nTo run it directly\n```bash\nnpx ocular-publish [mode]\n```\n\n## Modes\n\n- `beta` - bump pre-release version and publish with beta flag.\n- `prod` - bump patch version and publish.\n","slug":"docs/dev-tools/cli/ocular-publish","title":"ocular-publish"},{"excerpt":"ocular-test Run tests. Usage This script will usually be mapped to : To run it directly Modes  (default) - run lint, unit tests in node and…","rawMarkdownBody":"# ocular-test\n\nRun tests.\n\n## Usage\n\nThis script will usually be mapped to `test`:\n```bash\nyarn test [mode]\n```\n\nTo run it directly\n```bash\nnpx ocular-test [mode]\n```\n\n## Modes\n\n- `full` (default) - run lint, unit tests in node and headless browser\n- `fast` - run lint in pre-commit mode, unit tests in node\n- `dist` - run unit tests with transpiled (es5) code\n- `cover` - run unit tests and generate coverage report\n- `ci` - run lint, coverage, metrics and unit tests in headless browser\n- `node` - run unit tests in node\n- `node-debug` - run unit tests in node debugger\n- `browser` - run unit tests in browser (kept open for debugging)\n- `browser-headless` - run unit tests in headless browser\n- `bench` - run benchmarks in node\n- `bench-browser` - run benchmarks in browser (kept open for debugging)\n- other - custom mode:\n  + If -browser is in the mode name, run in browser, otherwise run in node\n  + If -browser-headless is in the mode name, run in headless browser\n  + The rest of the name is used to look up the entry point from the entry config.\n\n## Configuration\n\n[Configurations](#ocular-dev-tools-1): `aliases`, `entry`\n","slug":"docs/dev-tools/cli/ocular-test","title":"ocular-test"},{"excerpt":"Generated Pages Ocular gatsby programmatically generates pages at build time for docs and examples.  The configuration data used to generate…","rawMarkdownBody":"# Generated Pages\n\nOcular gatsby programmatically generates pages at build time for docs and examples.  The configuration data used to generate the pages at build time\nis made available to the page at runtime through the `pageContext` prop.\n\n## Docs Pages\n\nDoc pages are generated based on the contents of the `DOC_FOLDER` directory specified in `ocular-config.js`.\n\nPage context:\n\n| Configuration  | Type     | Description |\n| ---            | ---      | --- |\n| `toc`          | `String` | Type of table of contents used for page, 'docs' for doc page, 'examples' for example pages. |\n| `slug`         | `String` | Title entry in the table of contents for the page. |\n| `relativeLinks`| `Array`  | Mapping of relative to absolute links for all links on the page. |\n\n## Example Gallery Page\n\nAn example gallery page is generated based on the contents of the `EXAMPLES` configuration value specified in `ocular-config.js`.\n\nPage context:\n\n| Configuration | Type     | Description |\n| ---           | ---      | --- |\n| `toc`         | `String` | Type of table of contents used for page, 'docs' for doc page, 'examples' for example pages. |\n| `examples`    | `Array`  | Full list of example configurations from the `EXAMPLES` configuration value specified in `ocular-config.js`. |\n\n## Example Pages\n\nExample pages are generated based on the contents of the `EXAMPLES` configuration value specified in `ocular-config.js`.\n\nPage context:\n\n| Configuration   | Type     | Description |\n| ---             | ---      | --- |\n| `toc`           | `String` | Type of table of contents used for page, 'docs' for doc page, 'examples' for example pages. |\n| `slug`          | `String` | Title entry in the table of contents for the page. |\n| `exampleConfig` | `Object` | Individual example configuration from the `EXAMPLES` configuration value specified in `ocular-config.js`. |\n","slug":"docs/gatsby/api-reference/generated-pages","title":"Generated Pages"},{"excerpt":"Configuration Reference Configuration Type Description   Should be set to  if your project is hosted on Github.  (below) must be provided so…","rawMarkdownBody":"# Configuration Reference\n\n| Configuration      | Type | Description |\n| --- | --- | --- |\n| `PROJECT_TYPE`     | `String` | Should be set to `\"github\"` if your project is hosted on Github. `GITHUB_KEY` (below) must be provided so the site can display star counts and contributors. |\n| `PROJECT_NAME`     | `String` | The project's name (on github). |\n| `PROJECT_ORG`      | `String` | The project's Github organization. |\n| `PROJECT_URL`      | `String` | The project's URL |\n| `PROJECT_DESC`     | `String` | The project's description |\n| `PROJECTS`         | `Array`  | Array of links to related projects (header) |\n| `PATH_PREFIX`        | `String` | Subdirectory in which the site will be hosted, e.g. `'/site'`. Note that `gatsby` must be run with the `--prefix-paths` option for this to work.|\n| `HOME_PATH`        | `String` | |\n| `HOME_HEADING`     | `String` | |\n| `HOME_RIGHT`       | `String` | |\n| `HOME_BULLETS`     | `Array`  | See below |\n| `ADDITIONAL_LINKS` | `Array` | See below |\n| `GA_TRACKING`      | `String` | |\n| `GITHUB_KEY`       | `String` | The Github key for showing star counts and contributors. The value should be like `btoa('YourUsername:YourKey')` and the key should have readonly access. | |\n| `EXAMPLES`         | `Array` | See below |\n| `INDEX_PAGE_URL` | `String`  | Optional URL to a replacement component for the home page. |\n| `DOC_PAGE_URL` | `String`  | Optional URL to a replacement component for doc pages. |\n| `DOC_FOLDERS` | `Array`  | A set of paths to the doc folders to source all markdown files. |\n| `EXAMPLE_GALLERY_PAGE_URL` | `String`  | Optional URL to a replacement component for the example gallery page (`/examples`). |\n| `EXAMPLE_PAGE_URL` | `String`  | Optional URL to a replacement component for the default example page. Normally `EXAMPLES[].componentUrl` is used instead. |\n| `WEBPACK_ALIAS` | `Object` | Optional map that will be added to webpack aliases |\n| `WEBPACK_INCLUDE_REGEXP` | `Object` | Regexp (applies to file paths). Use to defeat loader excludes in default gatsby webpack config |\n| `WEBPACK_EXCLUDE_REGEXP` | `Object` | Regexp (applies to file paths). Use to exclude specific files in default gatsby webpack config |\n\n## PROJECTS\n\nProjects are links to related projects in the header drop down menu.\n\n| Field     | Type     | Name  |\n| ---       | ---      | ---   |\n| `title`    | `String` | The header of the link |\n| `url`    | `String` | The URL of the link |\n\n\n## HOME BULLETS\n\nThese are bullets on the home page, typically the main selling points of your framework:\n\n| Field     | Type     | Name  |\n| ---       | ---      | ---   |\n| `text`    | `String` | The header of the bullet point |\n| `desc`    | `String` | The text of the bullet point |\n| `image`   | `String` | The icon for the bullet. Typically `images/<icon>.svg`. Images are resolved in the `static` folder. |\n\n## ADDITIONAL_LINKS\n\nYou can add additional links in the header section. These links will be added after the default menu.\nEach link entry has the following fields:\n\n| Field     | Type     | Name  |\n| ---       | ---      | ---   |\n| `name`    | `String` | Required. The displayed text in the header link. |\n| `href`    | `String` | Optional. The hyperlink you want to redirect to. |\n| `to`   | `String` | Optional. The path to an internal gatsby page. Each entry will either only has `href` or `to`. |\n| `classnames` | `String` | Optional. The classname of the header link.\n| `index`      | `Int`    | Optional. Use 0 to push before first item. |\n\n\n## EXAMPLES\n\nEach EXAMPLE entry has the following fields\n\n| Field          | Type     | Name  |\n| ---            | ---      | ---   |\n| `componentUrl` | `String` | The filename of a React (`.jsx`) file |\n| `title`        | `String` | The title of example. |\n| `image`        | `String` | The icon for the bullet. Typically `images/<example-screenshot>.png`. Images are resolved in the `static` folder. (Right now only support png files) |\n| `path`         | `String` | The relative URL of the example in the website, typically `example/example-name` |\n","slug":"docs/gatsby/api-reference/ocular-config","title":"Configuration Reference"},{"excerpt":"Interactive examples Ocular allows you to feature examples in a gallery. Each example needs to be the default export of a specific file, for…","rawMarkdownBody":"# Interactive examples\n\nOcular allows you to feature examples in a gallery.\n\nEach example needs to be the default export of a specific file, for instance:\n\n```\nimport React from 'react';\n\nexport default function MyExample() {\n  return (<div>awesome example</div>);\n}\n```\n\nThen, in your `ocular-config.js` file you need to have an `EXAMPLES` property (by default, it's an empty array).\n\n## syntax of an Example object\n\nEXAMPLES will hold an array of objects, one for each example.\nEach object contains the following properties:\n\n- `title` (string): the name of the example (appears in table of contents) - ie :'My Awesome Example',\n- `image` (optional, string): a path towards an illustration for the example. That image will be resized to 150x150. (ie './images/my-awesome-example.png')\n\n- `componentUrl` (string): the asbolute path to the file holding your example component. (ie '/my-code/my-project/website/examples/my-awesome-example.js'). Alternatively you can use path.resolve - `resolve(__dirname, './examples/my-awesome-example')`\n\n- `path` (string): the route your example will be on (ie 'examples/awesome-example').\n\n## a word on relative paths\n\nThe path for images or componentsUrl will resolve to anything either in the `/src` or `/static` sub-folder of your Ocular folder. So in the above example, if you have an image file at `/src/images/my-awesome.example.png` or at `/static/images/my-awesome-example.png` the `image` parameter will work.\n","slug":"docs/gatsby/creating-content/interactive-examples","title":"Interactive examples"},{"excerpt":"Writing documentation Writing markdown files Ocular works by organizing a collection of markdown documents and generating web pages based on…","rawMarkdownBody":"# Writing documentation\n\n## Writing markdown files\n\nOcular works by organizing a collection of markdown documents and generating web pages based on these documents. \n\n### Titles\n\n`# Main title`\n# Main title\n\n`## Title`\n## Title\n\n`### Subtitle`\n### Subtitle\n\n### Text formatting\n\n`Text in **bold**` (or `Text in __bold__`)\nText in **bold**\n\n`Text in *italics*` (or `Text in _italics_`)\nText in _italics_\n\n`~~striked~~ text`\n~~striked~~ text\n\n### Quotes\n\n`> Quote`\n> Quote\n\n### Horizontal lines\n\n`---` horizontal rule\n\n---\n\n### Lists\n\n```\n1. list item\n2. list item\n3. list item\n\n---\n- list item\n- list item\n- list item\n\n---\n* list item\n* list item\n* list item\n```\n\n1. list item\n2. list item\n3. list item\n\n---\n\n- list item\n- list item\n- list item\n\n---\n\n* list item\n* list item\n* list item\n\n\n### Tables\n\n```\n| column header | column header |\n|---------------|---------------|\n| table cell | table cell |\n```\n\n\n| column header | column header |\n|---------------|---------------|\n| table cell | table cell |\n\n\n### Links\n\n`[Markdown table generator](https://www.tablesgenerator.com/markdown_tables)`\n\n[Markdown table generator](https://www.tablesgenerator.com/markdown_tables)\n\n### Images\n\n`![Vintage uber logo](http://i.imgur.com/YSLXJ9Q.png)`\n![Vintage uber logo](http://i.imgur.com/YSLXJ9Q.png)\n\n\n## Organizing documentation files\n\nThe simplest way to proceed is to have one root folder with all documentation files therein. You can then organize files in folder within that root folder. If you host your project on github and you use the /docs folder to store all of your documentation files, then your documentation will also be available within github documentation. This is the default configuration for Ocular. \n\nSpecify where the files are in your ocular-config.js file with the DOC_FOLDER property.\n\nAlternatively, you can use the DOC_FOLDERS property and pass an array of several folders. \n\nAt the root level of your documentation (so, either in the DOC_FOLDER location, or in one of the DOC_FOLDERS ones), you need to have a \"table-of-contents.json\" file - more on that in a moment. This describes how your documentation will be organized on the website. \n\nThe physical organization of the files (where the markdown files are) and the logical organization of the documentation (how they appear on the website) can be different. You could have all your files in one flat folder and your documentation neatly divided in chapters and parts on your site, or the opposite situation.\n\nWhen creating links between your documents, you can use: \n- links relative to the physical location of your files. So, if they are on the same folder, just the name of the other file.\n- links relative to the logical position of your document in the table of contents.\n- absolute links.\n\n\n## Creating a table of contents\n\n### Manual approach\n\n\n\n### Automatic approach\n\n### A word on titles","slug":"docs/gatsby/creating-content/writing-documentation","title":"Writing documentation"},{"excerpt":"Overview Ocular is a tool primarily designed for building documentation websites for github-based javascript frameworks, built using the…","rawMarkdownBody":"# Overview\n\nOcular is a tool primarily designed for building documentation websites for github-based javascript frameworks, built using the gatsbyjs documentation generation system.\n\nUsing ocular in your framework requires:\n* a directory with github markdown\n* examples...\n\n\n## Quick Setup\n\nIf you already have markdown documentation written for your framework, setting up an initial ocular based page is very quick:\n\n* Create a `website` folder in your framework repository's root folder.\n* Create a package.json and install `ocular` in the website folder.\n* Create the file `website/gatsby-config.js`, copied from ...\n* Create the file `website/gatsby-node.js`, copied from ...\n* Create the file `website/site-config.js`, copied from and modified to fit your site.\n* Create a `table-of-contents.json` at the root of your markdown documentation folder.\n\n\n## Deep Configuration\n\nSince your website contains the gatsbyjs entry point files (`gatsby-config.js` and `gatsby-node.js`) it is possible to take full control and override selected parts of ocular's documenation generation system.\n\nThe ocular package exports most internal components used by ocular so that you can reuse them in building customized functionality.\n\n\n## Functions\n\n### getGatsbyConfig(options : Object) : Object\n\nThis function takes your site configuration object and builds a complete gatsby configuration object, and populates it with a number of preinstalled plugins. This object is intended to be passed to gatsby as the exported value from your `website/gatsby-config.js` file.\n\n`getGatsbyConfig` is intended to be called in your `website/gatsby-config.js` file as follows:\n\n```\nrequire('reify'); // Enables ES6 \"import\" in imported files\n\nconst {setSiteConfig, getGatsbyConfig} = require('ocular');\n\nconst config = require('./ocular-config');\n\nsetSiteConfig(config);\n\nmodule.exports = getGatsbyConfig(config);\n```\n\nNOTE: You can forward the returned object directly to gatsby, or you can modify it first, e.g. to delete or add plugins before passing it on to gatsby. Consult [gatsby docs](https://www.gatsbyjs.org/) for more information on `gatsby-config.js` options.\n\n\n### getGatsbyNodeCallbacks() : Object\n\nForward these callbacks to gatsby in your `website/gatsby-node.js` file to set up default ocular configuration.\n\n```\nrequire('reify'); // Enables ES6 \"import\" in imported files\nconst {getGatsbyNodeCallbacks} = require('ocular');\n\nmodule.exports = getGatsbyNodeCallbacks();\n```\n\nNOTE: It is possible to override the ocular-provided callbacks and thus take full control of any aspect of gatsby's document generation process. Consult [gatsby docs](https://www.gatsbyjs.org/) for more information on `gatsby-node.js` callbacks.\n\n```\nrequire('reify'); // Enables ES6 \"import\" in imported files\nconst {getGatsbyNodeCallbacks} = require('ocular');\n\nmodule.exports = getGatsbyNodeCallbacks();\nmodule.exports.onCreateNode = ({ node, actions, getNode }) => {\n  // Do other things\n  ...\n  /// Call ocular default handling (or not)\n  getGatsbyNodeCallbacks.onCreateNode({ node, actions, getNode });\n};\n```\n\n\n## Components\n\nocular provides a number of common React components that can be used to create custom pages.\n\n\n### Layouts\n\nLayout components are components that remain static between pages\n\n\n#### Header\n\n\n#### Footer\n\n\n#### Table of Contents\n\n\n### Common Components\n\n\n#### SEO\n\nSearch engine optimization helper\n","slug":"docs/gatsby/developer-guide","title":"Overview"},{"excerpt":"Configuring your Website ocular-config.js The main way For details see ocular-config.js. Static Files CNAME If you have a custom domain, add…","rawMarkdownBody":"# Configuring your Website\n\n\n## ocular-config.js\n\nThe main way\n\nFor details see [ocular-config.js](docs/api-reference/ocular-config.md).\n\n\n## Static Files\n\n### CNAME\n\nIf you have a custom domain, add a `CNAME` file containing the name of the custom domain at the top of the `static` folder.\n\n### IMAGES\n\nImages are typically added to `static/images` folder\n","slug":"docs/gatsby/developer-guide/configuring","title":"Configuring your Website"},{"excerpt":"Deploying Deploying your ocular-gatsby page to the  branch is easy. Just install  and add the following script to your website's package…","rawMarkdownBody":"# Deploying\n\nDeploying your ocular-gatsby page to the `gh-pages` branch is easy. Just install `gh-pages` and add the following script to your website's package.json.\n\n```bash\nyarn add -D gh-pages\n```\n\nThen just build and deploy.\n\n```\ngatsby build\nNODE_DEBUG=gh-pages gh-pages -d public\n```\n\n\n## Automating\n\nYou can just add a `yarn deploy` script to your website as follows:\n\n```json\n  \"scripts\": {\n    \"deploy\": \"NODE_DEBUG=gh-pages gh-pages -d public\"\n  },\n  },\n  \"devDependencies\": {\n    \"gh-pages\": \"^2.0.1\",\n  }\n}\n```\n\nYou could optionally run a build before the deploy.\n\n\n## Remarks\n\n* The `NODE_DEBUG=gh-pages` prefix in the script is optional, it provides a bit more logging in case something goes wrong.","slug":"docs/gatsby/developer-guide/deploying","title":"Deploying"},{"excerpt":"Debugging ocular logLevel To get more information about what ocular is doing, what webpack config adjustments it is making etc, set the…","rawMarkdownBody":"# Debugging ocular\n\n## logLevel\n\nTo get more information about what ocular is doing, what webpack config adjustments it is making etc, set the `logLevel` field in your ocular config. `0` is the default value, higher values (`1` through `4`) show increasingly more information.\n","slug":"docs/gatsby/developer-guide/debugging","title":"Debugging ocular"}]}}}